ekf_filter_node:
  ros__parameters:

    # ------------------------------
    # General filter settings
    # ------------------------------
    frequency: 50.0                           # Filter update frequency (Hz)
    two_d_mode: false                         # Set 'true' if you really only want to operate in a planar environment
    publish_acceleration: true                # Publish acceleration state
    publish_tf: true                          # Whether to broadcast transform over /tf
    permit_corrected_publication: false
    # Frame names
    map_frame: map
    odom_frame: odom
    base_link_frame: base_footprint
    world_frame: odom

    print_diagnostics: true


    # ------------------------------
    # ODOMETRY CONFIGURATION
    # ------------------------------
    odom0: /yaw_rate/odom                              # Odometry topic
    odom0_config: [false,  false,  false,       # x, y, z positions
                   false, false, false,        # roll, pitch, yaw angles
                   true,  false, false,       # vx, vy, vz velocities
                   false, false, true,        # roll_rate, pitch_rate, yaw_rate
                   false, false, false]       # ax, ay, az accelerations


    # Typically for an Ackermann platform:
    #   - fuse x, y positions
    #   - skip z position (since it's presumably constant on flat ground)
    #   - do not fuse roll, pitch angles
    #   - fuse yaw angle
    #   - fuse vx (forward velocity)
    #   - skip vy (no lateral velocity in ideal Ackermann)
    #   - skip vz
    #   - fuse yaw rate if it is included in your odometry message

    odom0_differential: false                 # 'false' if your odometry is already in absolute form
    odom0_queue_size: 2
    # odom0_nodelay: false
    odom0_relative: true
    odom0_pose_use_child_frame: false
    # odom0_pose_rejection_threshold: 5         # Pose outlier rejection
    # odom0_twist_rejection_threshold: 1        # Twist outlier rejection

    # ------------------------------
    # FIRST IMU CONFIGURATION
    # ------------------------------
    imu0: /imu_086/data                     # IMU 0 topic
    imu0_config: [false, false, false,        # x, y, z positions
                  false,  false,  true,         # roll, pitch, yaw angles
                  false, false, false,        # vx, vy, vz velocities
                  false,  false,  true,         # roll_rate, pitch_rate, yaw_rate
                  true,  false,  false]         # ax, ay, az accelerations

    imu0_queue_size: 5
    imu0_relative: true
    # imu0_nodelay: false
    imu0_remove_gravitational_acceleration: false
    # imu0_pose_rejection_threshold: 0.8
    # imu0_twist_rejection_threshold: 1.0
    # imu0_linear_acceleration_rejection_threshold: 1.0

    # ------------------------------
    # SECOND IMU CONFIGURATION
    # ------------------------------
    # imu1: /imu_086/data                      # IMU 1 topic
    # imu1_config: [false, false, false,
    #               true,  true,  true,
    #               false, false, false,
    #               true,  true,  true,
    #               true,  true,  true]
    # imu1_queue_size: 5
    # imu1_relative: true
    # imu1_nodelay: false
    # imu1_remove_gravitational_acceleration: false
    # imu1_pose_rejection_threshold: 0.8
    # imu1_twist_rejection_threshold: 1.0
    # imu1_linear_acceleration_rejection_threshold: 1.0

    # [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
    # acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
    # correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
    # problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
    # this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
    # noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
    # for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
    # itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
    # make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
    # predicition. Note that if an acceleration measurement for the variable in question is available from one of the
    # inputs, the control term will be ignored.
    # Whether or not we use the control input during predicition. Defaults to false.
    use_control: false

    # Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
    # false.
    stamped_control: false

    # The last issued control command will be used in prediction for this period. Defaults to 0.2.
    control_timeout: 0.2

    # Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
    control_config: [true, false, false, false, false, true]

    # Places limits on how large the acceleration term will be. Should match your robot's kinematics.
    acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]

    # Acceleration and deceleration limits are not always the same for robots.
    deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]

    # If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
    # gains
    acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]

    # If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
    # gains
    deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

    # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
    # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
    # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
    # However, if users find that a given variable is slow to converge, one approach is to increase the
    # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
    # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
    # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
    # unspecified.
    # Note: the specification of covariance matrices can be cumbersome, so all matrix parameters in this package support
    # both full specification or specification of only the diagonal values.
    process_noise_covariance: [0.05, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.05, 0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.06, 0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.03, 0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.03, 0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.06, 0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.025, 0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.025, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.04, 0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01, 0.0,    0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01, 0.0,    0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.02, 0.0,    0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01, 0.0,    0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01, 0.0,
                                0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.015]

    # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
    # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
    # question. Users should take care not to use large values for variables that will not be measured directly. The values
    # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the diagonal values below
    # if unspecified. In this example, we specify only the diagonal of the matrix.
    # initial_estimate_covariance: [1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9, 1e-9]
